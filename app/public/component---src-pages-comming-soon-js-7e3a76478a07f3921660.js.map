{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/styles/makeStyles.js","webpack:///./node_modules/three/examples/jsm/postprocessing/Pass.js","webpack:///./node_modules/three/examples/jsm/shaders/CopyShader.js","webpack:///./node_modules/three/examples/jsm/postprocessing/ShaderPass.js","webpack:///./node_modules/three/examples/jsm/postprocessing/MaskPass.js","webpack:///./node_modules/three/examples/jsm/postprocessing/EffectComposer.js","webpack:///./node_modules/three/examples/jsm/postprocessing/RenderPass.js","webpack:///./node_modules/three/examples/jsm/shaders/AfterimageShader.js","webpack:///./node_modules/three/examples/jsm/postprocessing/AfterimagePass.js","webpack:///./node_modules/three/examples/jsm/shaders/FXAAShader.js","webpack:///./node_modules/three/examples/jsm/shaders/LuminosityHighPassShader.js","webpack:///./node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js","webpack:///./src/components/flocking/flock.js","webpack:///./src/components/flocking/index.js","webpack:///./src/pages/comming-soon.js"],"names":["camera","geometry","FullScreenQuad","stylesOrCreator","options","arguments","length","undefined","makeStyles","defaultTheme","CopyShader","uniforms","value","vertexShader","join","fragmentShader","Pass","this","enabled","needsSwap","clear","renderToScreen","Object","assign","prototype","setSize","render","console","error","material","_mesh","defineProperty","get","set","dispose","renderer","shader","textureID","call","clone","defines","fsQuad","create","constructor","writeBuffer","readBuffer","texture","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","scene","inverse","writeValue","clearValue","context","getContext","state","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","renderTarget","parameters","minFilter","magFilter","format","stencilBuffer","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","name","renderTarget1","renderTarget2","passes","copyPass","clock","swapBuffers","tmp","addPass","pass","push","insertPass","index","splice","isLastEnabledPass","passIndex","i","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","overrideMaterial","clearColor","clearAlpha","clearDepth","oldClearColor","oldClearAlpha","oldOverrideMaterial","oldAutoClear","autoClear","getClearColor","getHex","getClearAlpha","setClearColor","AfterimageShader","damp","textureComp","window","innerWidth","innerHeight","textureOld","shaderMaterial","compFsQuad","copyFsQuad","map","temp","FXAAShader","LuminosityHighPassShader","shaderID","resolution","strength","radius","threshold","x","y","pars","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","generateMipmaps","renderTargetHorizonal","renderTargetVertical","highPassShader","highPassUniforms","materialHighPassFilter","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomTintColors","copyShader","copyUniforms","materialCopy","blending","depthTest","depthWrite","transparent","basic","copy","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","seek","particle","target","position","velocity","maxVelocity","maxForce","desired","sub","normalize","multiplyScalar","divideScalar","clampLength","Flock","count","mouse","mesh","useRef","light","useThree","viewport","aspect","dummy","useMemo","THREE","particles","t","random","timeSpeed","accelleration","loopStep","useFrame","mousePosition","current","z","forEach","mousePressed","desiredSeparation","sin","mouseMix","separation","alignment","cohesion","separationCount","alignmentCount","cohesionCount","loopStart","loopEnd","d","distanceTo","diff","add","flee","perp","addVectors","runFlocking","clampScalar","velocityScale","scale","lookTarget","lookAt","updateMatrix","setMatrixAt","matrix","instanceMatrix","ref","distance","intensity","attach","args","wireframe","Effect","composer","gl","useEffect","attachArray","uniforms-resolution-value","App","onMouseMove","useCallback","clientX","clientY","style","onMouseDown","event","button","onMouseUp","fov","penumbra","extend","EffectComposer","ShaderPass","RenderPass","AfterimagePass","UnrealBloomPass","useStyles","theme","page","overflowY","overflowX","containerVariants","hidden","opacity","visible","transition","delay","duration","exit","ease","CoomingSoon","props","classes","useTheme","windowWidth","breakpointWidth","breakpoints","values","md","images","className","id","zIndex","fontFamily","top","Grid","container","justify","item","xs","div","variants","initial","animate","whileHover","whileTap","imgStyle","objectFit","margin","fluid","DeerLight","childImageSharp","to","darkMode","text","location","handleChange","title"],"mappings":"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","file":"component---src-pages-comming-soon-js-7e3a76478a07f3921660.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { makeStyles as makeStylesWithoutDefault } from '@material-ui/styles';\nimport defaultTheme from './defaultTheme';\n\nfunction makeStyles(stylesOrCreator) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return makeStylesWithoutDefault(stylesOrCreator, _extends({\n    defaultTheme: defaultTheme\n  }, options));\n}\n\nexport default makeStyles;","import \"core-js/modules/es6.object.assign\";\nimport { OrthographicCamera, PlaneBufferGeometry, Mesh } from \"../../../build/three.module.js\";\n\nfunction Pass() {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n  this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n  this.clear = false; // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n  this.renderToScreen = false;\n}\n\nObject.assign(Pass.prototype, {\n  setSize: function setSize()\n  /* width, height */\n  {},\n  render: function render()\n  /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n}); // Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = function () {\n  var camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new PlaneBufferGeometry(2, 2);\n\n  var FullScreenQuad = function FullScreenQuad(material) {\n    this._mesh = new Mesh(geometry, material);\n  };\n\n  Object.defineProperty(FullScreenQuad.prototype, 'material', {\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  });\n  Object.assign(FullScreenQuad.prototype, {\n    dispose: function dispose() {\n      this._mesh.geometry.dispose();\n    },\n    render: function render(renderer) {\n      renderer.render(this._mesh, camera);\n    }\n  });\n  return FullScreenQuad;\n}();\n\nexport { Pass };","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\nvar CopyShader = {\n  uniforms: {\n    \"tDiffuse\": {\n      value: null\n    },\n    \"opacity\": {\n      value: 1.0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float opacity;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec4 texel = texture2D( tDiffuse, vUv );\", \"\tgl_FragColor = opacity * texel;\", \"}\"].join(\"\\n\")\n};\nexport { CopyShader };","import \"core-js/modules/es6.object.assign\";\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\nimport { ShaderMaterial, UniformsUtils } from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ShaderPass(shader, textureID) {\n  Pass.call(this);\n  this.textureID = textureID !== undefined ? textureID : \"tDiffuse\";\n\n  if (shader instanceof ShaderMaterial) {\n    this.uniforms = shader.uniforms;\n    this.material = shader;\n  } else if (shader) {\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      defines: Object.assign({}, shader.defines),\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n  }\n\n  this.fsQuad = new Pass.FullScreenQuad(this.material);\n};\n\nShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: ShaderPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    this.fsQuad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer); // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\n      if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      this.fsQuad.render(renderer);\n    }\n  }\n});\nexport { ShaderPass };","import \"core-js/modules/es6.object.assign\";\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function MaskPass(scene, camera) {\n  Pass.call(this);\n  this.scene = scene;\n  this.camera = camera;\n  this.clear = true;\n  this.needsSwap = false;\n  this.inverse = false;\n};\n\nMaskPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: MaskPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    var context = renderer.getContext();\n    var state = renderer.state; // don't update color or depth\n\n    state.buffers.color.setMask(false);\n    state.buffers.depth.setMask(false); // lock buffers\n\n    state.buffers.color.setLocked(true);\n    state.buffers.depth.setLocked(true); // set up stencil\n\n    var writeValue, clearValue;\n\n    if (this.inverse) {\n      writeValue = 0;\n      clearValue = 1;\n    } else {\n      writeValue = 1;\n      clearValue = 0;\n    }\n\n    state.buffers.stencil.setTest(true);\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n    state.buffers.stencil.setClear(clearValue);\n    state.buffers.stencil.setLocked(true); // draw into the stencil buffer\n\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setRenderTarget(writeBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera); // unlock color and depth buffer for subsequent rendering\n\n    state.buffers.color.setLocked(false);\n    state.buffers.depth.setLocked(false); // only render where stencil is set to 1\n\n    state.buffers.stencil.setLocked(false);\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    state.buffers.stencil.setLocked(true);\n  }\n});\n\nvar ClearMaskPass = function ClearMaskPass() {\n  Pass.call(this);\n  this.needsSwap = false;\n};\n\nClearMaskPass.prototype = Object.create(Pass.prototype);\nObject.assign(ClearMaskPass.prototype, {\n  render: function render(renderer\n  /*, writeBuffer, readBuffer, deltaTime, maskActive */\n  ) {\n    renderer.state.buffers.stencil.setLocked(false);\n    renderer.state.buffers.stencil.setTest(false);\n  }\n});\nexport { MaskPass, ClearMaskPass };","import \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.function.name\";\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\nimport { Clock, LinearFilter, Mesh, OrthographicCamera, PlaneBufferGeometry, RGBAFormat, Vector2, WebGLRenderTarget } from \"../../../build/three.module.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function EffectComposer(renderer, renderTarget) {\n  this.renderer = renderer;\n\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat,\n      stencilBuffer: false\n    };\n    var size = renderer.getSize(new Vector2());\n    this._pixelRatio = renderer.getPixelRatio();\n    this._width = size.width;\n    this._height = size.height;\n    renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n    renderTarget.texture.name = 'EffectComposer.rt1';\n  } else {\n    this._pixelRatio = 1;\n    this._width = renderTarget.width;\n    this._height = renderTarget.height;\n  }\n\n  this.renderTarget1 = renderTarget;\n  this.renderTarget2 = renderTarget.clone();\n  this.renderTarget2.texture.name = 'EffectComposer.rt2';\n  this.writeBuffer = this.renderTarget1;\n  this.readBuffer = this.renderTarget2;\n  this.renderToScreen = true;\n  this.passes = []; // dependencies\n\n  if (CopyShader === undefined) {\n    console.error('THREE.EffectComposer relies on CopyShader');\n  }\n\n  if (ShaderPass === undefined) {\n    console.error('THREE.EffectComposer relies on ShaderPass');\n  }\n\n  this.copyPass = new ShaderPass(CopyShader);\n  this.clock = new Clock();\n};\n\nObject.assign(EffectComposer.prototype, {\n  swapBuffers: function swapBuffers() {\n    var tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  },\n  addPass: function addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  },\n  insertPass: function insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  },\n  isLastEnabledPass: function isLastEnabledPass(passIndex) {\n    for (var i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  render: function render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    var currentRenderTarget = this.renderer.getRenderTarget();\n    var maskActive = false;\n    var pass,\n        i,\n        il = this.passes.length;\n\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          var context = this.renderer.getContext();\n          var stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  },\n  reset: function reset(renderTarget) {\n    if (renderTarget === undefined) {\n      var size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  },\n  setSize: function setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    var effectiveWidth = this._width * this._pixelRatio;\n    var effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  },\n  setPixelRatio: function setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n});\n\nvar Pass = function Pass() {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n  this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n  this.clear = false; // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n  this.renderToScreen = false;\n};\n\nObject.assign(Pass.prototype, {\n  setSize: function setSize()\n  /* width, height */\n  {},\n  render: function render()\n  /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n}); // Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = function () {\n  var camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new PlaneBufferGeometry(2, 2);\n\n  var FullScreenQuad = function FullScreenQuad(material) {\n    this._mesh = new Mesh(geometry, material);\n  };\n\n  Object.defineProperty(FullScreenQuad.prototype, 'material', {\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  });\n  Object.assign(FullScreenQuad.prototype, {\n    dispose: function dispose() {\n      this._mesh.geometry.dispose();\n    },\n    render: function render(renderer) {\n      renderer.render(this._mesh, camera);\n    }\n  });\n  return FullScreenQuad;\n}();\n\nexport { EffectComposer, Pass };","import \"core-js/modules/es6.object.assign\";\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function RenderPass(scene, camera, overrideMaterial, clearColor, clearAlpha) {\n  Pass.call(this);\n  this.scene = scene;\n  this.camera = camera;\n  this.overrideMaterial = overrideMaterial;\n  this.clearColor = clearColor;\n  this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;\n  this.clear = true;\n  this.clearDepth = false;\n  this.needsSwap = false;\n};\n\nRenderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: RenderPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    var oldClearColor, oldClearAlpha, oldOverrideMaterial;\n\n    if (this.overrideMaterial !== undefined) {\n      oldOverrideMaterial = this.scene.overrideMaterial;\n      this.scene.overrideMaterial = this.overrideMaterial;\n    }\n\n    if (this.clearColor) {\n      oldClearColor = renderer.getClearColor().getHex();\n      oldClearAlpha = renderer.getClearAlpha();\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n    }\n\n    if (this.clearDepth) {\n      renderer.clearDepth();\n    }\n\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer); // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\n    if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    renderer.render(this.scene, this.camera);\n\n    if (this.clearColor) {\n      renderer.setClearColor(oldClearColor, oldClearAlpha);\n    }\n\n    if (this.overrideMaterial !== undefined) {\n      this.scene.overrideMaterial = oldOverrideMaterial;\n    }\n\n    renderer.autoClear = oldAutoClear;\n  }\n});\nexport { RenderPass };","/**\n * @author HypnosNova / https://www.threejs.org.cn/gallery/\n *\n * Afterimage shader\n * I created this effect inspired by a demo on codepen:\n * https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&\n */\nvar AfterimageShader = {\n  uniforms: {\n    \"damp\": {\n      value: 0.96\n    },\n    \"tOld\": {\n      value: null\n    },\n    \"tNew\": {\n      value: null\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float damp;\", \"uniform sampler2D tOld;\", \"uniform sampler2D tNew;\", \"varying vec2 vUv;\", \"vec4 when_gt( vec4 x, float y ) {\", \"\treturn max( sign( x - y ), 0.0 );\", \"}\", \"void main() {\", \"\tvec4 texelOld = texture2D( tOld, vUv );\", \"\tvec4 texelNew = texture2D( tNew, vUv );\", \"\ttexelOld *= damp * when_gt( texelOld, 0.1 );\", \"\tgl_FragColor = max(texelNew, texelOld);\", \"}\"].join(\"\\n\")\n};\nexport { AfterimageShader };","import \"core-js/modules/es6.object.assign\";\n\n/**\n * @author HypnosNova / https://www.threejs.org.cn/gallery/\n */\nimport { LinearFilter, MeshBasicMaterial, NearestFilter, RGBAFormat, ShaderMaterial, UniformsUtils, WebGLRenderTarget } from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { AfterimageShader } from \"../shaders/AfterimageShader.js\";\n\nvar AfterimagePass = function AfterimagePass(damp) {\n  Pass.call(this);\n  if (AfterimageShader === undefined) console.error(\"AfterimagePass relies on AfterimageShader\");\n  this.shader = AfterimageShader;\n  this.uniforms = UniformsUtils.clone(this.shader.uniforms);\n  this.uniforms[\"damp\"].value = damp !== undefined ? damp : 0.96;\n  this.textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n    minFilter: LinearFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  });\n  this.textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n    minFilter: LinearFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  });\n  this.shaderMaterial = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: this.shader.vertexShader,\n    fragmentShader: this.shader.fragmentShader\n  });\n  this.compFsQuad = new Pass.FullScreenQuad(this.shaderMaterial);\n  var material = new MeshBasicMaterial();\n  this.copyFsQuad = new Pass.FullScreenQuad(material);\n};\n\nAfterimagePass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: AfterimagePass,\n  render: function render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tOld\"].value = this.textureOld.texture;\n    this.uniforms[\"tNew\"].value = readBuffer.texture;\n    renderer.setRenderTarget(this.textureComp);\n    this.compFsQuad.render(renderer);\n    this.copyFsQuad.material.map = this.textureComp.texture;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.copyFsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.copyFsQuad.render(renderer);\n    } // Swap buffers.\n\n\n    var temp = this.textureOld;\n    this.textureOld = this.textureComp;\n    this.textureComp = temp; // Now textureOld contains the latest image, ready for the next frame.\n  },\n  setSize: function setSize(width, height) {\n    this.textureComp.setSize(width, height);\n    this.textureOld.setSize(width, height);\n  }\n});\nexport { AfterimagePass };","/**\n * @author alteredq / http://alteredqualia.com/\n * @author davidedc / http://www.sketchpatch.net/\n *\n * NVIDIA FXAA by Timothy Lottes\n * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\n * - WebGL port by @supereggbert\n * http://www.glge.org/demos/fxaa/\n */\nimport { Vector2 } from \"../../../build/three.module.js\";\nvar FXAAShader = {\n  uniforms: {\n    \"tDiffuse\": {\n      value: null\n    },\n    \"resolution\": {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"precision highp float;\", \"\", \"uniform sampler2D tDiffuse;\", \"\", \"uniform vec2 resolution;\", \"\", \"varying vec2 vUv;\", \"\", \"// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\", \"\", \"//----------------------------------------------------------------------------------\", \"// File:        es3-kepler\\FXAA\\assets\\shaders/FXAA_DefaultES.frag\", \"// SDK Version: v3.00\", \"// Email:       gameworks@nvidia.com\", \"// Site:        http://developer.nvidia.com/\", \"//\", \"// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\", \"//\", \"// Redistribution and use in source and binary forms, with or without\", \"// modification, are permitted provided that the following conditions\", \"// are met:\", \"//  * Redistributions of source code must retain the above copyright\", \"//    notice, this list of conditions and the following disclaimer.\", \"//  * Redistributions in binary form must reproduce the above copyright\", \"//    notice, this list of conditions and the following disclaimer in the\", \"//    documentation and/or other materials provided with the distribution.\", \"//  * Neither the name of NVIDIA CORPORATION nor the names of its\", \"//    contributors may be used to endorse or promote products derived\", \"//    from this software without specific prior written permission.\", \"//\", \"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\", \"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\", \"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\", \"// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\", \"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\", \"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\", \"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\", \"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\", \"// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\", \"// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\", \"// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\", \"//\", \"//----------------------------------------------------------------------------------\", \"\", \"#define FXAA_PC 1\", \"#define FXAA_GLSL_100 1\", \"#define FXAA_QUALITY_PRESET 12\", \"\", \"#define FXAA_GREEN_AS_LUMA 1\", \"\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_PC_CONSOLE\", \"    //\", \"    // The console algorithm for PC is included\", \"    // for developers targeting really low spec machines.\", \"    // Likely better to just run FXAA_PC, and use a really low preset.\", \"    //\", \"    #define FXAA_PC_CONSOLE 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_GLSL_120\", \"    #define FXAA_GLSL_120 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_GLSL_130\", \"    #define FXAA_GLSL_130 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_HLSL_3\", \"    #define FXAA_HLSL_3 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_HLSL_4\", \"    #define FXAA_HLSL_4 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_HLSL_5\", \"    #define FXAA_HLSL_5 0\", \"#endif\", \"/*==========================================================================*/\", \"#ifndef FXAA_GREEN_AS_LUMA\", \"    //\", \"    // For those using non-linear color,\", \"    // and either not able to get luma in alpha, or not wanting to,\", \"    // this enables FXAA to run using green as a proxy for luma.\", \"    // So with this enabled, no need to pack luma in alpha.\", \"    //\", \"    // This will turn off AA on anything which lacks some amount of green.\", \"    // Pure red and blue or combination of only R and B, will get no AA.\", \"    //\", \"    // Might want to lower the settings for both,\", \"    //    fxaaConsoleEdgeThresholdMin\", \"    //    fxaaQualityEdgeThresholdMin\", \"    // In order to insure AA does not get turned off on colors\", \"    // which contain a minor amount of green.\", \"    //\", \"    // 1 = On.\", \"    // 0 = Off.\", \"    //\", \"    #define FXAA_GREEN_AS_LUMA 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_EARLY_EXIT\", \"    //\", \"    // Controls algorithm's early exit path.\", \"    // On PS3 turning this ON adds 2 cycles to the shader.\", \"    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\", \"    // Turning this off on console will result in a more blurry image.\", \"    // So this defaults to on.\", \"    //\", \"    // 1 = On.\", \"    // 0 = Off.\", \"    //\", \"    #define FXAA_EARLY_EXIT 1\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_DISCARD\", \"    //\", \"    // Only valid for PC OpenGL currently.\", \"    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\", \"    //\", \"    // 1 = Use discard on pixels which don't need AA.\", \"    //     For APIs which enable concurrent TEX+ROP from same surface.\", \"    // 0 = Return unchanged color on pixels which don't need AA.\", \"    //\", \"    #define FXAA_DISCARD 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_FAST_PIXEL_OFFSET\", \"    //\", \"    // Used for GLSL 120 only.\", \"    //\", \"    // 1 = GL API supports fast pixel offsets\", \"    // 0 = do not use fast pixel offsets\", \"    //\", \"    #ifdef GL_EXT_gpu_shader4\", \"        #define FXAA_FAST_PIXEL_OFFSET 1\", \"    #endif\", \"    #ifdef GL_NV_gpu_shader5\", \"        #define FXAA_FAST_PIXEL_OFFSET 1\", \"    #endif\", \"    #ifdef GL_ARB_gpu_shader5\", \"        #define FXAA_FAST_PIXEL_OFFSET 1\", \"    #endif\", \"    #ifndef FXAA_FAST_PIXEL_OFFSET\", \"        #define FXAA_FAST_PIXEL_OFFSET 0\", \"    #endif\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_GATHER4_ALPHA\", \"    //\", \"    // 1 = API supports gather4 on alpha channel.\", \"    // 0 = API does not support gather4 on alpha channel.\", \"    //\", \"    #if (FXAA_HLSL_5 == 1)\", \"        #define FXAA_GATHER4_ALPHA 1\", \"    #endif\", \"    #ifdef GL_ARB_gpu_shader5\", \"        #define FXAA_GATHER4_ALPHA 1\", \"    #endif\", \"    #ifdef GL_NV_gpu_shader5\", \"        #define FXAA_GATHER4_ALPHA 1\", \"    #endif\", \"    #ifndef FXAA_GATHER4_ALPHA\", \"        #define FXAA_GATHER4_ALPHA 0\", \"    #endif\", \"#endif\", \"\", \"\", \"/*============================================================================\", \"                        FXAA QUALITY - TUNING KNOBS\", \"------------------------------------------------------------------------------\", \"NOTE the other tuning knobs are now in the shader function inputs!\", \"============================================================================*/\", \"#ifndef FXAA_QUALITY_PRESET\", \"    //\", \"    // Choose the quality preset.\", \"    // This needs to be compiled into the shader as it effects code.\", \"    // Best option to include multiple presets is to\", \"    // in each shader define the preset, then include this file.\", \"    //\", \"    // OPTIONS\", \"    // -----------------------------------------------------------------------\", \"    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\", \"    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\", \"    // 39       - no dither, very expensive\", \"    //\", \"    // NOTES\", \"    // -----------------------------------------------------------------------\", \"    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\", \"    // 13 = about same speed as FXAA 3.9 and better than 12\", \"    // 23 = closest to FXAA 3.9 visually and performance wise\", \"    //  _ = the lowest digit is directly related to performance\", \"    // _  = the highest digit is directly related to style\", \"    //\", \"    #define FXAA_QUALITY_PRESET 12\", \"#endif\", \"\", \"\", \"/*============================================================================\", \"\", \"                           FXAA QUALITY - PRESETS\", \"\", \"============================================================================*/\", \"\", \"/*============================================================================\", \"                     FXAA QUALITY - MEDIUM DITHER PRESETS\", \"============================================================================*/\", \"#if (FXAA_QUALITY_PRESET == 10)\", \"    #define FXAA_QUALITY_PS 3\", \"    #define FXAA_QUALITY_P0 1.5\", \"    #define FXAA_QUALITY_P1 3.0\", \"    #define FXAA_QUALITY_P2 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 11)\", \"    #define FXAA_QUALITY_PS 4\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 3.0\", \"    #define FXAA_QUALITY_P3 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 12)\", \"    #define FXAA_QUALITY_PS 5\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 4.0\", \"    #define FXAA_QUALITY_P4 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 13)\", \"    #define FXAA_QUALITY_PS 6\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 4.0\", \"    #define FXAA_QUALITY_P5 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 14)\", \"    #define FXAA_QUALITY_PS 7\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 4.0\", \"    #define FXAA_QUALITY_P6 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 15)\", \"    #define FXAA_QUALITY_PS 8\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 4.0\", \"    #define FXAA_QUALITY_P7 12.0\", \"#endif\", \"\", \"/*============================================================================\", \"                     FXAA QUALITY - LOW DITHER PRESETS\", \"============================================================================*/\", \"#if (FXAA_QUALITY_PRESET == 20)\", \"    #define FXAA_QUALITY_PS 3\", \"    #define FXAA_QUALITY_P0 1.5\", \"    #define FXAA_QUALITY_P1 2.0\", \"    #define FXAA_QUALITY_P2 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 21)\", \"    #define FXAA_QUALITY_PS 4\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 22)\", \"    #define FXAA_QUALITY_PS 5\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 23)\", \"    #define FXAA_QUALITY_PS 6\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 24)\", \"    #define FXAA_QUALITY_PS 7\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 3.0\", \"    #define FXAA_QUALITY_P6 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 25)\", \"    #define FXAA_QUALITY_PS 8\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 4.0\", \"    #define FXAA_QUALITY_P7 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 26)\", \"    #define FXAA_QUALITY_PS 9\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 4.0\", \"    #define FXAA_QUALITY_P8 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 27)\", \"    #define FXAA_QUALITY_PS 10\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 4.0\", \"    #define FXAA_QUALITY_P9 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 28)\", \"    #define FXAA_QUALITY_PS 11\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 2.0\", \"    #define FXAA_QUALITY_P9 4.0\", \"    #define FXAA_QUALITY_P10 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 29)\", \"    #define FXAA_QUALITY_PS 12\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 2.0\", \"    #define FXAA_QUALITY_P9 2.0\", \"    #define FXAA_QUALITY_P10 4.0\", \"    #define FXAA_QUALITY_P11 8.0\", \"#endif\", \"\", \"/*============================================================================\", \"                     FXAA QUALITY - EXTREME QUALITY\", \"============================================================================*/\", \"#if (FXAA_QUALITY_PRESET == 39)\", \"    #define FXAA_QUALITY_PS 12\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.0\", \"    #define FXAA_QUALITY_P2 1.0\", \"    #define FXAA_QUALITY_P3 1.0\", \"    #define FXAA_QUALITY_P4 1.0\", \"    #define FXAA_QUALITY_P5 1.5\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 2.0\", \"    #define FXAA_QUALITY_P9 2.0\", \"    #define FXAA_QUALITY_P10 4.0\", \"    #define FXAA_QUALITY_P11 8.0\", \"#endif\", \"\", \"\", \"\", \"/*============================================================================\", \"\", \"                                API PORTING\", \"\", \"============================================================================*/\", \"#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\", \"    #define FxaaBool bool\", \"    #define FxaaDiscard discard\", \"    #define FxaaFloat float\", \"    #define FxaaFloat2 vec2\", \"    #define FxaaFloat3 vec3\", \"    #define FxaaFloat4 vec4\", \"    #define FxaaHalf float\", \"    #define FxaaHalf2 vec2\", \"    #define FxaaHalf3 vec3\", \"    #define FxaaHalf4 vec4\", \"    #define FxaaInt2 ivec2\", \"    #define FxaaSat(x) clamp(x, 0.0, 1.0)\", \"    #define FxaaTex sampler2D\", \"#else\", \"    #define FxaaBool bool\", \"    #define FxaaDiscard clip(-1)\", \"    #define FxaaFloat float\", \"    #define FxaaFloat2 float2\", \"    #define FxaaFloat3 float3\", \"    #define FxaaFloat4 float4\", \"    #define FxaaHalf half\", \"    #define FxaaHalf2 half2\", \"    #define FxaaHalf3 half3\", \"    #define FxaaHalf4 half4\", \"    #define FxaaSat(x) saturate(x)\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_GLSL_100 == 1)\", \"  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\", \"  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_GLSL_120 == 1)\", \"    // Requires,\", \"    //  #version 120\", \"    // And at least,\", \"    //  #extension GL_EXT_gpu_shader4 : enable\", \"    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\", \"    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\", \"    #if (FXAA_FAST_PIXEL_OFFSET == 1)\", \"        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\", \"    #else\", \"        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\", \"    #endif\", \"    #if (FXAA_GATHER4_ALPHA == 1)\", \"        // use #extension GL_ARB_gpu_shader5 : enable\", \"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\", \"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\", \"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\", \"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\", \"    #endif\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_GLSL_130 == 1)\", \"    // Requires \\\"#version 130\\\" or better\", \"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\", \"    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\", \"    #if (FXAA_GATHER4_ALPHA == 1)\", \"        // use #extension GL_ARB_gpu_shader5 : enable\", \"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\", \"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\", \"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\", \"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\", \"    #endif\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_HLSL_3 == 1)\", \"    #define FxaaInt2 float2\", \"    #define FxaaTex sampler2D\", \"    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\", \"    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_HLSL_4 == 1)\", \"    #define FxaaInt2 int2\", \"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\", \"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\", \"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_HLSL_5 == 1)\", \"    #define FxaaInt2 int2\", \"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\", \"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\", \"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\", \"    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\", \"    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\", \"    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\", \"    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\", \"#endif\", \"\", \"\", \"/*============================================================================\", \"                   GREEN AS LUMA OPTION SUPPORT FUNCTION\", \"============================================================================*/\", \"#if (FXAA_GREEN_AS_LUMA == 0)\", \"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\", \"#else\", \"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\", \"#endif\", \"\", \"\", \"\", \"\", \"/*============================================================================\", \"\", \"                             FXAA3 QUALITY - PC\", \"\", \"============================================================================*/\", \"#if (FXAA_PC == 1)\", \"/*--------------------------------------------------------------------------*/\", \"FxaaFloat4 FxaaPixelShader(\", \"    //\", \"    // Use noperspective interpolation here (turn off perspective interpolation).\", \"    // {xy} = center of pixel\", \"    FxaaFloat2 pos,\", \"    //\", \"    // Used only for FXAA Console, and not used on the 360 version.\", \"    // Use noperspective interpolation here (turn off perspective interpolation).\", \"    // {xy_} = upper left of pixel\", \"    // {_zw} = lower right of pixel\", \"    FxaaFloat4 fxaaConsolePosPos,\", \"    //\", \"    // Input color texture.\", \"    // {rgb_} = color in linear or perceptual color space\", \"    // if (FXAA_GREEN_AS_LUMA == 0)\", \"    //     {__a} = luma in perceptual color space (not linear)\", \"    FxaaTex tex,\", \"    //\", \"    // Only used on the optimized 360 version of FXAA Console.\", \"    // For everything but 360, just use the same input here as for \\\"tex\\\".\", \"    // For 360, same texture, just alias with a 2nd sampler.\", \"    // This sampler needs to have an exponent bias of -1.\", \"    FxaaTex fxaaConsole360TexExpBiasNegOne,\", \"    //\", \"    // Only used on the optimized 360 version of FXAA Console.\", \"    // For everything but 360, just use the same input here as for \\\"tex\\\".\", \"    // For 360, same texture, just alias with a 3nd sampler.\", \"    // This sampler needs to have an exponent bias of -2.\", \"    FxaaTex fxaaConsole360TexExpBiasNegTwo,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This must be from a constant/uniform.\", \"    // {x_} = 1.0/screenWidthInPixels\", \"    // {_y} = 1.0/screenHeightInPixels\", \"    FxaaFloat2 fxaaQualityRcpFrame,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This must be from a constant/uniform.\", \"    // This effects sub-pixel AA quality and inversely sharpness.\", \"    //   Where N ranges between,\", \"    //     N = 0.50 (default)\", \"    //     N = 0.33 (sharper)\", \"    // {x__} = -N/screenWidthInPixels\", \"    // {_y_} = -N/screenHeightInPixels\", \"    // {_z_} =  N/screenWidthInPixels\", \"    // {__w} =  N/screenHeightInPixels\", \"    FxaaFloat4 fxaaConsoleRcpFrameOpt,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // Not used on 360, but used on PS3 and PC.\", \"    // This must be from a constant/uniform.\", \"    // {x__} = -2.0/screenWidthInPixels\", \"    // {_y_} = -2.0/screenHeightInPixels\", \"    // {_z_} =  2.0/screenWidthInPixels\", \"    // {__w} =  2.0/screenHeightInPixels\", \"    FxaaFloat4 fxaaConsoleRcpFrameOpt2,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\", \"    // This must be from a constant/uniform.\", \"    // {x__} =  8.0/screenWidthInPixels\", \"    // {_y_} =  8.0/screenHeightInPixels\", \"    // {_z_} = -4.0/screenWidthInPixels\", \"    // {__w} = -4.0/screenHeightInPixels\", \"    FxaaFloat4 fxaaConsole360RcpFrameOpt2,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This used to be the FXAA_QUALITY_SUBPIX define.\", \"    // It is here now to allow easier tuning.\", \"    // Choose the amount of sub-pixel aliasing removal.\", \"    // This can effect sharpness.\", \"    //   1.00 - upper limit (softer)\", \"    //   0.75 - default amount of filtering\", \"    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\", \"    //   0.25 - almost off\", \"    //   0.00 - completely off\", \"    FxaaFloat fxaaQualitySubpix,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\", \"    // It is here now to allow easier tuning.\", \"    // The minimum amount of local contrast required to apply algorithm.\", \"    //   0.333 - too little (faster)\", \"    //   0.250 - low quality\", \"    //   0.166 - default\", \"    //   0.125 - high quality\", \"    //   0.063 - overkill (slower)\", \"    FxaaFloat fxaaQualityEdgeThreshold,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\", \"    // It is here now to allow easier tuning.\", \"    // Trims the algorithm from processing darks.\", \"    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\", \"    //   0.0625 - high quality (faster)\", \"    //   0.0312 - visible limit (slower)\", \"    // Special notes when using FXAA_GREEN_AS_LUMA,\", \"    //   Likely want to set this to zero.\", \"    //   As colors that are mostly not-green\", \"    //   will appear very dark in the green channel!\", \"    //   Tune by looking at mostly non-green content,\", \"    //   then start at zero and increase until aliasing is a problem.\", \"    FxaaFloat fxaaQualityEdgeThresholdMin,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\", \"    // It is here now to allow easier tuning.\", \"    // This does not effect PS3, as this needs to be compiled in.\", \"    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\", \"    //   Due to the PS3 being ALU bound,\", \"    //   there are only three safe values here: 2 and 4 and 8.\", \"    //   These options use the shaders ability to a free *|/ by 2|4|8.\", \"    // For all other platforms can be a non-power of two.\", \"    //   8.0 is sharper (default!!!)\", \"    //   4.0 is softer\", \"    //   2.0 is really soft (good only for vector graphics inputs)\", \"    FxaaFloat fxaaConsoleEdgeSharpness,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\", \"    // It is here now to allow easier tuning.\", \"    // This does not effect PS3, as this needs to be compiled in.\", \"    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\", \"    //   Due to the PS3 being ALU bound,\", \"    //   there are only two safe values here: 1/4 and 1/8.\", \"    //   These options use the shaders ability to a free *|/ by 2|4|8.\", \"    // The console setting has a different mapping than the quality setting.\", \"    // Other platforms can use other values.\", \"    //   0.125 leaves less aliasing, but is softer (default!!!)\", \"    //   0.25 leaves more aliasing, and is sharper\", \"    FxaaFloat fxaaConsoleEdgeThreshold,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\", \"    // It is here now to allow easier tuning.\", \"    // Trims the algorithm from processing darks.\", \"    // The console setting has a different mapping than the quality setting.\", \"    // This only applies when FXAA_EARLY_EXIT is 1.\", \"    // This does not apply to PS3,\", \"    // PS3 was simplified to avoid more shader instructions.\", \"    //   0.06 - faster but more aliasing in darks\", \"    //   0.05 - default\", \"    //   0.04 - slower and less aliasing in darks\", \"    // Special notes when using FXAA_GREEN_AS_LUMA,\", \"    //   Likely want to set this to zero.\", \"    //   As colors that are mostly not-green\", \"    //   will appear very dark in the green channel!\", \"    //   Tune by looking at mostly non-green content,\", \"    //   then start at zero and increase until aliasing is a problem.\", \"    FxaaFloat fxaaConsoleEdgeThresholdMin,\", \"    //\", \"    // Extra constants for 360 FXAA Console only.\", \"    // Use zeros or anything else for other platforms.\", \"    // These must be in physical constant registers and NOT immediates.\", \"    // Immediates will result in compiler un-optimizing.\", \"    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\", \"    FxaaFloat4 fxaaConsole360ConstDir\", \") {\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat2 posM;\", \"    posM.x = pos.x;\", \"    posM.y = pos.y;\", \"    #if (FXAA_GATHER4_ALPHA == 1)\", \"        #if (FXAA_DISCARD == 0)\", \"            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\", \"            #if (FXAA_GREEN_AS_LUMA == 0)\", \"                #define lumaM rgbyM.w\", \"            #else\", \"                #define lumaM rgbyM.y\", \"            #endif\", \"        #endif\", \"        #if (FXAA_GREEN_AS_LUMA == 0)\", \"            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\", \"            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\", \"        #else\", \"            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\", \"            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\", \"        #endif\", \"        #if (FXAA_DISCARD == 1)\", \"            #define lumaM luma4A.w\", \"        #endif\", \"        #define lumaE luma4A.z\", \"        #define lumaS luma4A.x\", \"        #define lumaSE luma4A.y\", \"        #define lumaNW luma4B.w\", \"        #define lumaN luma4B.z\", \"        #define lumaW luma4B.x\", \"    #else\", \"        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\", \"        #if (FXAA_GREEN_AS_LUMA == 0)\", \"            #define lumaM rgbyM.w\", \"        #else\", \"            #define lumaM rgbyM.y\", \"        #endif\", \"        #if (FXAA_GLSL_100 == 1)\", \"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\", \"        #else\", \"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\", \"        #endif\", \"    #endif\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat maxSM = max(lumaS, lumaM);\", \"    FxaaFloat minSM = min(lumaS, lumaM);\", \"    FxaaFloat maxESM = max(lumaE, maxSM);\", \"    FxaaFloat minESM = min(lumaE, minSM);\", \"    FxaaFloat maxWN = max(lumaN, lumaW);\", \"    FxaaFloat minWN = min(lumaN, lumaW);\", \"    FxaaFloat rangeMax = max(maxWN, maxESM);\", \"    FxaaFloat rangeMin = min(minWN, minESM);\", \"    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\", \"    FxaaFloat range = rangeMax - rangeMin;\", \"    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\", \"    FxaaBool earlyExit = range < rangeMaxClamped;\", \"/*--------------------------------------------------------------------------*/\", \"    if(earlyExit)\", \"        #if (FXAA_DISCARD == 1)\", \"            FxaaDiscard;\", \"        #else\", \"            return rgbyM;\", \"        #endif\", \"/*--------------------------------------------------------------------------*/\", \"    #if (FXAA_GATHER4_ALPHA == 0)\", \"        #if (FXAA_GLSL_100 == 1)\", \"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\", \"        #else\", \"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\", \"        #endif\", \"    #else\", \"        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\", \"        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\", \"    #endif\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat lumaNS = lumaN + lumaS;\", \"    FxaaFloat lumaWE = lumaW + lumaE;\", \"    FxaaFloat subpixRcpRange = 1.0/range;\", \"    FxaaFloat subpixNSWE = lumaNS + lumaWE;\", \"    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\", \"    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat lumaNESE = lumaNE + lumaSE;\", \"    FxaaFloat lumaNWNE = lumaNW + lumaNE;\", \"    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\", \"    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat lumaNWSW = lumaNW + lumaSW;\", \"    FxaaFloat lumaSWSE = lumaSW + lumaSE;\", \"    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\", \"    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\", \"    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\", \"    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\", \"    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\", \"    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\", \"    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\", \"    FxaaBool horzSpan = edgeHorz >= edgeVert;\", \"    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\", \"/*--------------------------------------------------------------------------*/\", \"    if(!horzSpan) lumaN = lumaW;\", \"    if(!horzSpan) lumaS = lumaE;\", \"    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\", \"    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat gradientN = lumaN - lumaM;\", \"    FxaaFloat gradientS = lumaS - lumaM;\", \"    FxaaFloat lumaNN = lumaN + lumaM;\", \"    FxaaFloat lumaSS = lumaS + lumaM;\", \"    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\", \"    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\", \"    if(pairN) lengthSign = -lengthSign;\", \"    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat2 posB;\", \"    posB.x = posM.x;\", \"    posB.y = posM.y;\", \"    FxaaFloat2 offNP;\", \"    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\", \"    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\", \"    if(!horzSpan) posB.x += lengthSign * 0.5;\", \"    if( horzSpan) posB.y += lengthSign * 0.5;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat2 posN;\", \"    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\", \"    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\", \"    FxaaFloat2 posP;\", \"    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\", \"    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\", \"    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\", \"    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\", \"    FxaaFloat subpixE = subpixC * subpixC;\", \"    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\", \"/*--------------------------------------------------------------------------*/\", \"    if(!pairN) lumaNN = lumaSS;\", \"    FxaaFloat gradientScaled = gradient * 1.0/4.0;\", \"    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\", \"    FxaaFloat subpixF = subpixD * subpixE;\", \"    FxaaBool lumaMLTZero = lumaMM < 0.0;\", \"/*--------------------------------------------------------------------------*/\", \"    lumaEndN -= lumaNN * 0.5;\", \"    lumaEndP -= lumaNN * 0.5;\", \"    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\", \"    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\", \"    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\", \"    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\", \"    FxaaBool doneNP = (!doneN) || (!doneP);\", \"    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\", \"    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\", \"/*--------------------------------------------------------------------------*/\", \"    if(doneNP) {\", \"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"        doneN = abs(lumaEndN) >= gradientScaled;\", \"        doneP = abs(lumaEndP) >= gradientScaled;\", \"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\", \"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\", \"        doneNP = (!doneN) || (!doneP);\", \"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\", \"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\", \"/*--------------------------------------------------------------------------*/\", \"        #if (FXAA_QUALITY_PS > 3)\", \"        if(doneNP) {\", \"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"            doneN = abs(lumaEndN) >= gradientScaled;\", \"            doneP = abs(lumaEndP) >= gradientScaled;\", \"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\", \"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\", \"            doneNP = (!doneN) || (!doneP);\", \"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\", \"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\", \"/*--------------------------------------------------------------------------*/\", \"            #if (FXAA_QUALITY_PS > 4)\", \"            if(doneNP) {\", \"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                doneN = abs(lumaEndN) >= gradientScaled;\", \"                doneP = abs(lumaEndP) >= gradientScaled;\", \"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\", \"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\", \"                doneNP = (!doneN) || (!doneP);\", \"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\", \"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\", \"/*--------------------------------------------------------------------------*/\", \"                #if (FXAA_QUALITY_PS > 5)\", \"                if(doneNP) {\", \"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                    doneN = abs(lumaEndN) >= gradientScaled;\", \"                    doneP = abs(lumaEndP) >= gradientScaled;\", \"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\", \"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\", \"                    doneNP = (!doneN) || (!doneP);\", \"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\", \"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\", \"/*--------------------------------------------------------------------------*/\", \"                    #if (FXAA_QUALITY_PS > 6)\", \"                    if(doneNP) {\", \"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                        doneN = abs(lumaEndN) >= gradientScaled;\", \"                        doneP = abs(lumaEndP) >= gradientScaled;\", \"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\", \"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\", \"                        doneNP = (!doneN) || (!doneP);\", \"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\", \"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\", \"/*--------------------------------------------------------------------------*/\", \"                        #if (FXAA_QUALITY_PS > 7)\", \"                        if(doneNP) {\", \"                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                            doneN = abs(lumaEndN) >= gradientScaled;\", \"                            doneP = abs(lumaEndP) >= gradientScaled;\", \"                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\", \"                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\", \"                            doneNP = (!doneN) || (!doneP);\", \"                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\", \"                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\", \"/*--------------------------------------------------------------------------*/\", \"    #if (FXAA_QUALITY_PS > 8)\", \"    if(doneNP) {\", \"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"        doneN = abs(lumaEndN) >= gradientScaled;\", \"        doneP = abs(lumaEndP) >= gradientScaled;\", \"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\", \"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\", \"        doneNP = (!doneN) || (!doneP);\", \"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\", \"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\", \"/*--------------------------------------------------------------------------*/\", \"        #if (FXAA_QUALITY_PS > 9)\", \"        if(doneNP) {\", \"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"            doneN = abs(lumaEndN) >= gradientScaled;\", \"            doneP = abs(lumaEndP) >= gradientScaled;\", \"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\", \"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\", \"            doneNP = (!doneN) || (!doneP);\", \"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\", \"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\", \"/*--------------------------------------------------------------------------*/\", \"            #if (FXAA_QUALITY_PS > 10)\", \"            if(doneNP) {\", \"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                doneN = abs(lumaEndN) >= gradientScaled;\", \"                doneP = abs(lumaEndP) >= gradientScaled;\", \"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\", \"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\", \"                doneNP = (!doneN) || (!doneP);\", \"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\", \"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\", \"/*--------------------------------------------------------------------------*/\", \"                #if (FXAA_QUALITY_PS > 11)\", \"                if(doneNP) {\", \"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                    doneN = abs(lumaEndN) >= gradientScaled;\", \"                    doneP = abs(lumaEndP) >= gradientScaled;\", \"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\", \"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\", \"                    doneNP = (!doneN) || (!doneP);\", \"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\", \"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\", \"/*--------------------------------------------------------------------------*/\", \"                    #if (FXAA_QUALITY_PS > 12)\", \"                    if(doneNP) {\", \"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                        doneN = abs(lumaEndN) >= gradientScaled;\", \"                        doneP = abs(lumaEndP) >= gradientScaled;\", \"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\", \"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\", \"                        doneNP = (!doneN) || (!doneP);\", \"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\", \"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\", \"/*--------------------------------------------------------------------------*/\", \"                    }\", \"                    #endif\", \"/*--------------------------------------------------------------------------*/\", \"                }\", \"                #endif\", \"/*--------------------------------------------------------------------------*/\", \"            }\", \"            #endif\", \"/*--------------------------------------------------------------------------*/\", \"        }\", \"        #endif\", \"/*--------------------------------------------------------------------------*/\", \"    }\", \"    #endif\", \"/*--------------------------------------------------------------------------*/\", \"                        }\", \"                        #endif\", \"/*--------------------------------------------------------------------------*/\", \"                    }\", \"                    #endif\", \"/*--------------------------------------------------------------------------*/\", \"                }\", \"                #endif\", \"/*--------------------------------------------------------------------------*/\", \"            }\", \"            #endif\", \"/*--------------------------------------------------------------------------*/\", \"        }\", \"        #endif\", \"/*--------------------------------------------------------------------------*/\", \"    }\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat dstN = posM.x - posN.x;\", \"    FxaaFloat dstP = posP.x - posM.x;\", \"    if(!horzSpan) dstN = posM.y - posN.y;\", \"    if(!horzSpan) dstP = posP.y - posM.y;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\", \"    FxaaFloat spanLength = (dstP + dstN);\", \"    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\", \"    FxaaFloat spanLengthRcp = 1.0/spanLength;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaBool directionN = dstN < dstP;\", \"    FxaaFloat dst = min(dstN, dstP);\", \"    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\", \"    FxaaFloat subpixG = subpixF * subpixF;\", \"    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\", \"    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\", \"    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\", \"    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\", \"    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\", \"    #if (FXAA_DISCARD == 1)\", \"        return FxaaTexTop(tex, posM);\", \"    #else\", \"        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\", \"    #endif\", \"}\", \"/*==========================================================================*/\", \"#endif\", \"\", \"void main() {\", \"  gl_FragColor = FxaaPixelShader(\", \"    vUv,\", \"    vec4(0.0),\", \"    tDiffuse,\", \"    tDiffuse,\", \"    tDiffuse,\", \"    resolution,\", \"    vec4(0.0),\", \"    vec4(0.0),\", \"    vec4(0.0),\", \"    0.75,\", \"    0.166,\", \"    0.0833,\", \"    0.0,\", \"    0.0,\", \"    0.0,\", \"    vec4(0.0)\", \"  );\", \"\", \"  // TODO avoid querying texture twice for same texel\", \"  gl_FragColor.a = texture2D(tDiffuse, vUv).a;\", \"}\"].join(\"\\n\")\n};\nexport { FXAAShader };","/**\n * @author bhouston / http://clara.io/\n *\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\nimport { Color } from \"../../../build/three.module.js\";\nvar LuminosityHighPassShader = {\n  shaderID: \"luminosityHighPass\",\n  uniforms: {\n    \"tDiffuse\": {\n      value: null\n    },\n    \"luminosityThreshold\": {\n      value: 1.0\n    },\n    \"smoothWidth\": {\n      value: 1.0\n    },\n    \"defaultColor\": {\n      value: new Color(0x000000)\n    },\n    \"defaultOpacity\": {\n      value: 0.0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform vec3 defaultColor;\", \"uniform float defaultOpacity;\", \"uniform float luminosityThreshold;\", \"uniform float smoothWidth;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec4 texel = texture2D( tDiffuse, vUv );\", \"\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\", \"\tfloat v = dot( texel.xyz, luma );\", \"\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\", \"\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\", \"\tgl_FragColor = mix( outputColor, texel, alpha );\", \"}\"].join(\"\\n\")\n};\nexport { LuminosityHighPassShader };","import \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.function.name\";\n\n/**\n * @author spidersharma / http://eduperiment.com/\n */\nimport { AdditiveBlending, Color, LinearFilter, MeshBasicMaterial, RGBAFormat, ShaderMaterial, UniformsUtils, Vector2, Vector3, WebGLRenderTarget } from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\n/**\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * Reference:\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\n\nvar UnrealBloomPass = function UnrealBloomPass(resolution, strength, radius, threshold) {\n  Pass.call(this);\n  this.strength = strength !== undefined ? strength : 1;\n  this.radius = radius;\n  this.threshold = threshold;\n  this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256); // create color only once here, reuse it later inside the render function\n\n  this.clearColor = new Color(0, 0, 0); // render targets\n\n  var pars = {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  };\n  this.renderTargetsHorizontal = [];\n  this.renderTargetsVertical = [];\n  this.nMips = 5;\n  var resx = Math.round(this.resolution.x / 2);\n  var resy = Math.round(this.resolution.y / 2);\n  this.renderTargetBright = new WebGLRenderTarget(resx, resy, pars);\n  this.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n  this.renderTargetBright.texture.generateMipmaps = false;\n\n  for (var i = 0; i < this.nMips; i++) {\n    var renderTargetHorizonal = new WebGLRenderTarget(resx, resy, pars);\n    renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n    renderTargetHorizonal.texture.generateMipmaps = false;\n    this.renderTargetsHorizontal.push(renderTargetHorizonal);\n    var renderTargetVertical = new WebGLRenderTarget(resx, resy, pars);\n    renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n    renderTargetVertical.texture.generateMipmaps = false;\n    this.renderTargetsVertical.push(renderTargetVertical);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n  } // luminosity high pass material\n\n\n  if (LuminosityHighPassShader === undefined) console.error(\"UnrealBloomPass relies on LuminosityHighPassShader\");\n  var highPassShader = LuminosityHighPassShader;\n  this.highPassUniforms = UniformsUtils.clone(highPassShader.uniforms);\n  this.highPassUniforms[\"luminosityThreshold\"].value = threshold;\n  this.highPassUniforms[\"smoothWidth\"].value = 0.01;\n  this.materialHighPassFilter = new ShaderMaterial({\n    uniforms: this.highPassUniforms,\n    vertexShader: highPassShader.vertexShader,\n    fragmentShader: highPassShader.fragmentShader,\n    defines: {}\n  }); // Gaussian Blur Materials\n\n  this.separableBlurMaterials = [];\n  var kernelSizeArray = [3, 5, 7, 9, 11];\n  var resx = Math.round(this.resolution.x / 2);\n  var resy = Math.round(this.resolution.y / 2);\n\n  for (var i = 0; i < this.nMips; i++) {\n    this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n    this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n  } // Composite material\n\n\n  this.compositeMaterial = this.getCompositeMaterial(this.nMips);\n  this.compositeMaterial.uniforms[\"blurTexture1\"].value = this.renderTargetsVertical[0].texture;\n  this.compositeMaterial.uniforms[\"blurTexture2\"].value = this.renderTargetsVertical[1].texture;\n  this.compositeMaterial.uniforms[\"blurTexture3\"].value = this.renderTargetsVertical[2].texture;\n  this.compositeMaterial.uniforms[\"blurTexture4\"].value = this.renderTargetsVertical[3].texture;\n  this.compositeMaterial.uniforms[\"blurTexture5\"].value = this.renderTargetsVertical[4].texture;\n  this.compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n  this.compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n  this.compositeMaterial.needsUpdate = true;\n  var bloomFactors = [1.0, 0.8, 0.6, 0.4, 0.2];\n  this.compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n  this.bloomTintColors = [new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1)];\n  this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors; // copy material\n\n  if (CopyShader === undefined) {\n    console.error(\"UnrealBloomPass relies on CopyShader\");\n  }\n\n  var copyShader = CopyShader;\n  this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n  this.copyUniforms[\"opacity\"].value = 1.0;\n  this.materialCopy = new ShaderMaterial({\n    uniforms: this.copyUniforms,\n    vertexShader: copyShader.vertexShader,\n    fragmentShader: copyShader.fragmentShader,\n    blending: AdditiveBlending,\n    depthTest: false,\n    depthWrite: false,\n    transparent: true\n  });\n  this.enabled = true;\n  this.needsSwap = false;\n  this.oldClearColor = new Color();\n  this.oldClearAlpha = 1;\n  this.basic = new MeshBasicMaterial();\n  this.fsQuad = new Pass.FullScreenQuad(null);\n};\n\nUnrealBloomPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: UnrealBloomPass,\n  dispose: function dispose() {\n    for (var i = 0; i < this.renderTargetsHorizontal.length; i++) {\n      this.renderTargetsHorizontal[i].dispose();\n    }\n\n    for (var i = 0; i < this.renderTargetsVertical.length; i++) {\n      this.renderTargetsVertical[i].dispose();\n    }\n\n    this.renderTargetBright.dispose();\n  },\n  setSize: function setSize(width, height) {\n    var resx = Math.round(width / 2);\n    var resy = Math.round(height / 2);\n    this.renderTargetBright.setSize(resx, resy);\n\n    for (var i = 0; i < this.nMips; i++) {\n      this.renderTargetsHorizontal[i].setSize(resx, resy);\n      this.renderTargetsVertical[i].setSize(resx, resy);\n      this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n  },\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    this.oldClearColor.copy(renderer.getClearColor());\n    this.oldClearAlpha = renderer.getClearAlpha();\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(this.clearColor, 0);\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render input to screen\n\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.basic;\n      this.basic.map = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    } // 1. Extract Bright Areas\n\n\n    this.highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n    this.fsQuad.material = this.materialHighPassFilter;\n    renderer.setRenderTarget(this.renderTargetBright);\n    renderer.clear();\n    this.fsQuad.render(renderer); // 2. Blur All the mips progressively\n\n    var inputRenderTarget = this.renderTargetBright;\n\n    for (var i = 0; i < this.nMips; i++) {\n      this.fsQuad.material = this.separableBlurMaterials[i];\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = inputRenderTarget.texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = UnrealBloomPass.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetsHorizontal[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = this.renderTargetsHorizontal[i].texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = UnrealBloomPass.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetsVertical[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      inputRenderTarget = this.renderTargetsVertical[i];\n    } // Composite All the mips\n\n\n    this.fsQuad.material = this.compositeMaterial;\n    this.compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n    this.compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n    this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n    renderer.setRenderTarget(this.renderTargetsHorizontal[0]);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Blend it additively over the input texture\n\n    this.fsQuad.material = this.materialCopy;\n    this.copyUniforms[\"tDiffuse\"].value = this.renderTargetsHorizontal[0].texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n    } // Restore renderer settings\n\n\n    renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  },\n  getSeperableBlurMaterial: function getSeperableBlurMaterial(kernelRadius) {\n    return new ShaderMaterial({\n      defines: {\n        \"KERNEL_RADIUS\": kernelRadius,\n        \"SIGMA\": kernelRadius\n      },\n      uniforms: {\n        \"colorTexture\": {\n          value: null\n        },\n        \"texSize\": {\n          value: new Vector2(0.5, 0.5)\n        },\n        \"direction\": {\n          value: new Vector2(0.5, 0.5)\n        }\n      },\n      vertexShader: \"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n      fragmentShader: \"#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\n\\\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat x = float(i);\\\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\n\t\t\t\t}\"\n    });\n  },\n  getCompositeMaterial: function getCompositeMaterial(nMips) {\n    return new ShaderMaterial({\n      defines: {\n        \"NUM_MIPS\": nMips\n      },\n      uniforms: {\n        \"blurTexture1\": {\n          value: null\n        },\n        \"blurTexture2\": {\n          value: null\n        },\n        \"blurTexture3\": {\n          value: null\n        },\n        \"blurTexture4\": {\n          value: null\n        },\n        \"blurTexture5\": {\n          value: null\n        },\n        \"dirtTexture\": {\n          value: null\n        },\n        \"bloomStrength\": {\n          value: 1.0\n        },\n        \"bloomFactors\": {\n          value: null\n        },\n        \"bloomTintColors\": {\n          value: null\n        },\n        \"bloomRadius\": {\n          value: 0.0\n        }\n      },\n      vertexShader: \"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n      fragmentShader: \"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D blurTexture1;\\\n\t\t\t\tuniform sampler2D blurTexture2;\\\n\t\t\t\tuniform sampler2D blurTexture3;\\\n\t\t\t\tuniform sampler2D blurTexture4;\\\n\t\t\t\tuniform sampler2D blurTexture5;\\\n\t\t\t\tuniform sampler2D dirtTexture;\\\n\t\t\t\tuniform float bloomStrength;\\\n\t\t\t\tuniform float bloomRadius;\\\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\n\t\t\t\t\\\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\n\t\t\t\t}\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\n\t\t\t\t}\"\n    });\n  }\n});\nUnrealBloomPass.BlurDirectionX = new Vector2(1.0, 0.0);\nUnrealBloomPass.BlurDirectionY = new Vector2(0.0, 1.0);\nexport { UnrealBloomPass };","import * as THREE from \"three\";\r\nimport React, { useRef, useMemo } from \"react\";\r\nimport { useFrame, useThree } from \"react-three-fiber\";\r\nimport \"./styles.css\"\r\n\r\n//returns a vector towards a point, slows down as we near it\r\nfunction seek(particle, target) {\r\n  let { position, velocity, maxVelocity, maxForce } = particle;\r\n  let desired = target.clone();\r\n  desired.sub(position);\r\n  let length = desired.length();\r\n  desired.normalize();\r\n  desired.multiplyScalar(maxVelocity);\r\n  desired.sub(velocity);\r\n  if (length > 0) {\r\n    desired.divideScalar(1 / length);\r\n  }\r\n  desired.clampLength(-maxForce, maxForce);\r\n  return desired;\r\n}\r\n\r\n//returns a vector towards a point, slows down as we near it\r\nfunction flee(particle, target) {\r\n  let { position, velocity, maxVelocity, maxForce } = particle;\r\n  let desired = position.clone();\r\n  desired.sub(target);\r\n  let length = desired.length();\r\n  desired.normalize();\r\n  desired.multiplyScalar(maxVelocity);\r\n  desired.sub(velocity);\r\n  if (length > 20) {\r\n    desired.multiplyScalar(0.0);\r\n  }\r\n  desired.z = 0;\r\n  desired.clampLength(-maxForce, maxForce);\r\n  return desired;\r\n}\r\n\r\n//Run alignment, cohesion, and separation as a single loop\r\nfunction runFlocking(particle, particles, index, mousePosition, mousePressed) {\r\n  let { maxVelocity, maxForce, velocity, t } = particle;\r\n\r\n  //The following const values configure the distances at which to follow other boids\r\n  const desiredSeparation = 8 + 5 * Math.sin(t * 0.1);\r\n  const desiredAlignment = 30;\r\n  const desiredCohesion = 12;\r\n\r\n  //Weights for the flocking simulation\r\n  const separationMix = 2.6;\r\n  const alignmentMix = 0.6;\r\n  const cohesionMix = 0.2;\r\n  const mouseMix = 0.8 + Math.sin(t * 0.3) * 0.3;\r\n\r\n  let separation = new THREE.Vector3();\r\n  let alignment = new THREE.Vector3();\r\n  let cohesion = new THREE.Vector3();\r\n  let separationCount = 0;\r\n  let alignmentCount = 0;\r\n  let cohesionCount = 0;\r\n\r\n  particle.loopStep++;\r\n  let loopStart = particle.loopStep % 2 === 0 ? 0 : particles.length / 2;\r\n  let loopEnd =\r\n    particle.loopStep % 2 === 0 ? particles.length / 2 : particles.length;\r\n\r\n  for (let i = loopStart; i < loopEnd; ++i) {\r\n    let { position, velocity } = particles[i];\r\n    let d = particle.position.distanceTo(position);\r\n\r\n    //Calculate separation steering forces\r\n    if (d > 0 && d < desiredSeparation) {\r\n      let diff = particle.position.clone();\r\n      diff.sub(position);\r\n      diff.divideScalar(d);\r\n      separation.add(diff);\r\n      separationCount++;\r\n    }\r\n\r\n    //Calculate cohesion steering forces\r\n    if (d > 0 && d < desiredCohesion) {\r\n      cohesion.add(position);\r\n      cohesionCount++;\r\n    }\r\n\r\n    //Calculate alignment steering forces\r\n    if (d > 0 && d < desiredAlignment) {\r\n      alignment.add(velocity);\r\n      alignmentCount++;\r\n    }\r\n  }\r\n\r\n  //Post-process separation\r\n  if (separationCount > 0) {\r\n    separation.divideScalar(separationCount);\r\n  }\r\n  if (separation.length() > 0) {\r\n    separation.normalize();\r\n    separation.multiplyScalar(maxVelocity);\r\n    separation.sub(velocity);\r\n    separation.clampLength(-maxForce, maxForce);\r\n  }\r\n\r\n  //Post process cohesion\r\n  if (cohesionCount > 0) {\r\n    cohesion.divideScalar(cohesionCount);\r\n  }\r\n\r\n  //Post-process alignment\r\n  if (alignmentCount > 0) {\r\n    alignment.divideScalar(alignmentCount);\r\n  }\r\n  if (alignment.length() > 0) {\r\n    alignment.normalize();\r\n    alignment.multiplyScalar(maxVelocity);\r\n    alignment.sub(velocity);\r\n    alignment.clampLength(-maxForce, maxForce);\r\n  }\r\n\r\n  particle.accelleration.add(separation.multiplyScalar(separationMix));\r\n  particle.accelleration.add(\r\n    seek(particle, cohesion).multiplyScalar(cohesionMix)\r\n  );\r\n\r\n  particle.accelleration.add(alignment.multiplyScalar(alignmentMix));\r\n\r\n  if (mousePressed) {\r\n    particle.accelleration.add(flee(particle, mousePosition).multiplyScalar(2));\r\n  } else {\r\n    let temp = particle.position.clone();\r\n    temp.sub(mousePosition);\r\n    temp.normalize();\r\n    let perp = new THREE.Vector3(temp.y, temp.x, temp.z);\r\n\r\n    perp.multiplyScalar(5);\r\n    temp.addVectors(mousePosition, perp);\r\n\r\n    particle.accelleration.add(seek(particle, temp).multiplyScalar(mouseMix));\r\n  }\r\n}\r\n\r\nexport function Flock({ count, mouse }) {\r\n  const mesh = useRef();\r\n  const light = useRef();\r\n  const { size, viewport } = useThree();\r\n  const aspect = size.width / viewport.width;\r\n\r\n  const dummy = useMemo(() => new THREE.Object3D(), []);\r\n  // Generate some random positions, speed factors and timings\r\n  const particles = useMemo(() => {\r\n    const temp = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const t = Math.random() * 100;\r\n      const timeSpeed = (0.01 + Math.random() / 200) / 2;\r\n      const velocity = new THREE.Vector3(\r\n        0.5 - Math.random(),\r\n        0.5 - Math.random(),\r\n        0.5 - Math.random()\r\n      );\r\n      const position = new THREE.Vector3(\r\n        (0.5 - Math.random()) * 100,\r\n        (0.5 - Math.random()) * 100,\r\n        (0.5 - Math.random()) * 100\r\n      );\r\n      const maxVelocity = 1.0 + Math.random() * 0.5;\r\n      const maxForce = 0.1;\r\n      const accelleration = new THREE.Vector3(0, 0, 0);\r\n      const loopStep = 0;\r\n      temp.push({\r\n        t,\r\n        timeSpeed,\r\n        position,\r\n        velocity,\r\n        maxVelocity,\r\n        maxForce,\r\n        accelleration,\r\n        loopStep\r\n      });\r\n    }\r\n    return temp;\r\n  }, [count]);\r\n  // The innards of this hook will run every frame\r\n  useFrame(state => {\r\n    let mousePosition = new THREE.Vector3(\r\n      mouse.current[0] / aspect,\r\n      -mouse.current[1] / aspect,\r\n      0\r\n    );\r\n\r\n    light.current.position.set(\r\n      mousePosition.x,\r\n      mousePosition.y,\r\n      mousePosition.z\r\n    );\r\n\r\n    particles.forEach((particle, i) => {\r\n      let { timeSpeed, maxVelocity } = particle;\r\n\r\n      particle.t += timeSpeed;\r\n\r\n      particle.accelleration.x = 0;\r\n      particle.accelleration.y = 0;\r\n      particle.accelleration.z = 0;\r\n\r\n      runFlocking(particle, particles, i, mousePosition, mouse.current[2]);\r\n\r\n      //Make sure our particles don't change direction too quickly\r\n      particle.accelleration.multiplyScalar(0.15);\r\n\r\n      particle.velocity.multiplyScalar(0.999);\r\n      particle.velocity.add(particle.accelleration);\r\n      particle.velocity.clampScalar(-maxVelocity, maxVelocity);\r\n\r\n      particle.position.add(particle.velocity);\r\n\r\n      // Update the dummy object\r\n      dummy.position.set(\r\n        particle.position.x,\r\n        particle.position.y,\r\n        particle.position.z\r\n      );\r\n\r\n      let velocityScale = particle.velocity.length() / maxVelocity;\r\n\r\n      dummy.scale.set(velocityScale, velocityScale, 5 * velocityScale);\r\n\r\n      let lookTarget = dummy.position.clone();\r\n      lookTarget.add(particle.velocity);\r\n\r\n      dummy.lookAt(lookTarget);\r\n      dummy.updateMatrix();\r\n      // And apply the matrix to the instanced item\r\n      mesh.current.setMatrixAt(i, dummy.matrix);\r\n    });\r\n    mesh.current.instanceMatrix.needsUpdate = true;\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <pointLight ref={light} distance={50} intensity={5} color=\"#4353ff\">\r\n        <mesh>\r\n          <sphereBufferGeometry attach=\"geometry\" args={[2.5, 32, 32]} />\r\n          <meshBasicMaterial attach=\"material\" color=\"#4353ff\" />\r\n        </mesh>\r\n      </pointLight>\r\n      <instancedMesh ref={mesh} args={[null, null, count]}>\r\n        <boxBufferGeometry attach=\"geometry\" args={[1.5, 0]} />{\" \"}\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          wireframe=\"true\"\r\n          color=\"white\"\r\n        />\r\n      </instancedMesh>\r\n    </>\r\n  );\r\n}\r\n","import * as THREE from \"three\"\nimport React, { useCallback, useEffect, useRef, useMemo } from \"react\"\nimport { Canvas, extend, useFrame, useThree } from \"react-three-fiber\"\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\"\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\"\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\"\nimport { AfterimagePass } from \"three/examples/jsm/postprocessing/AfterimagePass\"\nimport { FXAAShader } from \"three/examples/jsm/shaders/FXAAShader\"\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\"\nimport { Flock } from \"./flock\"\nimport \"./styles.css\"\n\n// Makes these prototypes available as \"native\" jsx-string elements\nextend({\n  EffectComposer,\n  ShaderPass,\n  RenderPass,\n  AfterimagePass,\n  UnrealBloomPass,\n})\n\nfunction Effect() {\n  const composer = useRef()\n  const { scene, gl, size, camera } = useThree()\n  const aspect = useMemo(() => new THREE.Vector2(size.width, size.height), [\n    size,\n  ])\n  useEffect(() => void composer.current.setSize(size.width, size.height), [\n    size,\n  ])\n  useFrame(() => composer.current.render(), 1)\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      <unrealBloomPass attachArray=\"passes\" args={[aspect, 1.3, 1, 0]} />\n      <shaderPass\n        attachArray=\"passes\"\n        args={[FXAAShader]}\n        uniforms-resolution-value={[1 / size.width, 1 / size.height]}\n        renderToScreen\n      />\n    </effectComposer>\n  )\n}\n\nexport default function App() {\n  const mouse = useRef([0, 0, false])\n\n  const onMouseMove = useCallback(\n    ({ clientX: x, clientY: y }) =>\n      (mouse.current = [x - window.innerWidth / 2, y - window.innerHeight / 2]),\n    []\n  )\n\n  const handleMouseDown = event => {\n    if (event.button !== 2) {\n      mouse.current[2] = true\n    }\n  }\n\n  const handleMouseUp = event => {\n    if (event.button !== 2) {\n      mouse.current[2] = false\n    }\n  }\n\n  return (\n    <div\n      style={{ width: \"100%\", height: \"100%\" }}\n      onMouseMove={onMouseMove}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n    >\n      <Canvas camera={{ fov: 75, position: [0, 0, 70] }}>\n        <spotLight\n          intensity={0.05}\n          position={[0, 0, 70]}\n          penumbra={1}\n          color=\"lightblue\"\n        />\n        {/* <mesh>\n          <planeBufferGeometry attach=\"geometry\" args={[10000, 10000]} />\n          <meshPhongMaterial\n            attach=\"material\"\n            color=\"#0E0D18\"\n            depthTest={false}\n          />\n        </mesh> */}\n        <Flock mouse={mouse} count={600} />\n        <Effect />\n      </Canvas>\n    </div>\n  )\n}\n","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport HeroText from \"../components/heroText\"\r\nimport \"../css/neon.css\"\r\nimport { useTheme, makeStyles } from \"@material-ui/core/styles\"\r\nimport Flock from \"../components/flocking\"\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\nimport { Grid } from \"@material-ui/core\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  page: {\r\n    overflowY: \"hidden\",\r\n    overflowX: \"hidden\",\r\n    height: \"100vh\",\r\n    position: \"fixed\",\r\n  },\r\n}))\r\n\r\nconst containerVariants = {\r\n  hidden: {\r\n    opacity: 0,\r\n  },\r\n  visible: {\r\n    opacity: 1,\r\n    transition: { delay: 1.5, duration: 1.5 },\r\n  },\r\n  exit: {\r\n    x: \"-100vh\",\r\n    transition: { ease: \"easeInOut\" },\r\n  },\r\n}\r\n\r\nconst CoomingSoon = props => {\r\n  const classes = useStyles()\r\n  const theme = useTheme()\r\n  var windowWidth = 0\r\n  var breakpointWidth = theme.breakpoints.values.md\r\n  var isSmallScreen = false\r\n\r\n  useEffect(() => {\r\n    windowWidth = window.innerWidth\r\n    isSmallScreen = windowWidth < breakpointWidth\r\n  }, [])\r\n  const images = useStaticQuery(graphql`\r\n    query {\r\n      DeerDark: file(relativePath: { eq: \"DeerDark.png\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 400) {\r\n            ...GatsbyImageSharpFluid\r\n          }\r\n        }\r\n      }\r\n      DeerLight: file(relativePath: { eq: \"DeerLight.png\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 400) {\r\n            ...GatsbyImageSharpFluid\r\n          }\r\n        }\r\n      }\r\n      Deer: file(relativePath: { eq: \"Deer.png\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 400) {\r\n            ...GatsbyImageSharpFluid\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n  return (\r\n    <div className={classes.page}>\r\n      <div\r\n        id=\"root\"\r\n        style={{\r\n          height: \"100vh\",\r\n          zIndex: 1,\r\n        }}\r\n      >\r\n        <Flock />\r\n      </div>\r\n      <div\r\n        style={{\r\n          fontFamily: \"MADE Evolve Sans Medium EVO\",\r\n          position: \"absolute\",\r\n          top: \"10%\",\r\n          zIndex: 2,\r\n          color: \"#fff\",\r\n          height: 100,\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <Grid container justify=\"center\">\r\n          <Grid item xs={12}>\r\n            <motion.div\r\n              className=\"home container\"\r\n              variants={containerVariants}\r\n              initial=\"hidden\"\r\n              animate=\"visible\"\r\n              exit=\"exit\"\r\n              whileHover={{ scale: 1.1 }}\r\n              whileTap={{ scale: 0.9 }}\r\n            >\r\n              <AnimatePresence>\r\n                <Img\r\n                  imgStyle={{ objectFit: \"contain\" }}\r\n                  style={{ margin: \"1rem\", height: \"80px\" }}\r\n                  fluid={images.DeerLight.childImageSharp.fluid}\r\n                />\r\n              </AnimatePresence>\r\n            </motion.div>\r\n          </Grid>\r\n          <Link\r\n            to=\"/\"\r\n            id=\"neonButton\"\r\n            style={{\r\n              fontFamily: \"MADE Evolve Sans Medium EVO\",\r\n            }}\r\n          >\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n            Return To Home Page\r\n          </Link>\r\n          <Grid xs={12}>\r\n            <HeroText\r\n              darkMode={true}\r\n              text=\"COMMING SOON... Under Construction.\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n\r\n      <Layout\r\n        location={props.location}\r\n        handleChange={() => {\r\n          //setDarkMode(!darkMode)\r\n        }}\r\n      >\r\n        <SEO title=\"Under Construction\" />\r\n      </Layout>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CoomingSoon\r\n"],"sourceRoot":""}